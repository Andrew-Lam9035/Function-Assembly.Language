_evenOddCheck:
        push    ebp  ;Start with saving the value of ebp to the stack
        mov     ebp, esp ;Then make ebp point to the same location as esp

        mov eax, DWORD[ebp+8] ;Now we can put the pushed number into eax.
        and eax, 1 ;Now with and if the number is even, then it will be zero because of the other odd number 1 and jumps to evenNum
        jz evenNum ;If the number is odd, then it will be 1 because of both being odd numbers and not jump to evenNum
                                
        mov eax, 4
        mov ebx, 1
        mov ecx, odd ;Prints Odd
        mov edx, 3
        int 0x80
        call space ;Go to the procedure space
        
evenNum:
        mov eax, 4
        mov ebx, 1
        mov ecx, even ;Prints Even
        mov edx, 4
        int 0x80
        call space ;Go to the procedure space
        
        
space:
        mov eax, 4
        mov ebx, 1
        mov ecx, spaceAdd ;This just adds a space at the end or else the command will be typed on the same
                                            ;line as Odd or Even
        mov edx, 1
        int 0x80
        
        jmp exit ;Jumps to exit
        
        
exit: 
        leave 
        ret

section .text
        global _start

_start:
        push 100 ;Push a number to the function evenOddCheck
        call _evenOddCheck ;Call the function
        
        mov eax, 1
        int 0x80
      
  
segment .data
        odd dd 'Odd'
        even dd 'Even'
        spaceAdd dd 10 ;In ASCII, the new line is 10 
